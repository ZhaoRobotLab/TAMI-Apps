# // ref: https://github.com/xiaopengzhao/tammy_app/blob/39b85f32b6cd1d463568f96c1344c35ee2f463b2/app/src/main/python/myScript.py
import openai
import re

def testResponse(userPrompt):
    openai.api_key = "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"
    response = openai.Completion.create(
        engine="davinci",
        prompt=userPrompt,
        temperature=0.5,
        max_tokens=75,
        top_p=1,
        frequency_penalty=0.0,
        presence_penalty=0.6,
        stop=["\n", " User:", "Tammy:"]
    )

    return str(response["choices"][0]["text"])

def addNextLine(original, next, ans):
    if ans == "": ret = str(original) + "\nUser: " + str(next) + "\nTammy:"
    else: ret = str(original) + str(ans)
    return ret

# this function is used to update the conversation history
# if there was a question generated by openAI, then a dummy answer added
# parameters:
#   * oaPrompt:
#   * original: the raw response generated by openAI
#   * derivation: the formatted response
def questionHandler(oaPrompt, original, derivation):
    ret = re.search(r"[\'A-Za-z\s]*\?", original)
    if ret is not None: # check for any questions in the response--
        conv_history = addNextLine(oaPrompt, "", original)
        conv_history += "\nUser: I don't know."
        return conv_history
    else:
        return addNextLine(oaPrompt, "", derivation)

# original: the comment generated by openai
def removeQuestion(original, convHistory, defComments):
    # find a default comment hasn't already been used
    default_com = ""
    for comment in defComments:
        used_flag = re.search(comment, convHistory) # search for the comment in the conversation history
        if used_flag is None: # check result of search (comment not found)
            default_com = comment # set a default comment
            break

    # return a general comment if needed
    regex = r"[\â€™\'/A-Za-z\s]*\?" # set regex to any question
    ret = re.search(regex, original) # search for a question in the comment
    if ret is not None: # check result of search (question found)
        ret = re.sub(regex, "", original) # replace found questions with NULL
        if ret == "": # if the comment was just a question, replace it with a default statement
            return default_com
        else:
            return ret

    # return the original comment
    return original